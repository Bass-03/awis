#!/usr/bin/env ruby
require "bundler/setup"
require "awis"
require "utils"
require "rubygems"
require "commander/import"
require "fileutils"
require "date"
require "json"


# Get all information, store it in file system
# format: folder name is a date and a possible 'label'
# file name is the domain only, if the domain exists no call will be made to awis

program :name, 'awis'
program :version, '1.0.0'
program :description, 'Get sinformation from Alexa Web Information Services'
program :help_formatter, :compact

command :info do |c|
  c.syntax = 'awis info'
  c.description = 'Gets data from UrlInfo action.'
  c.option '-f FILE','--file FILE',String, 'Path to CSV holding domain, last column must be the domains'
  c.option '-o PATH','--output PATH', String, 'Output directory'
  c.option '-l LABEL','--label LABEL', String, 'Label to add to the output folder'
  c.action do |args, options|
    if !options.file or !options.output
      puts "Set all options: file and output path"
      exit
    end
    # Create output directory
    output_path = "#{options.output}/#{Date.today.to_s} Url_Info"
    output_path += " - #{options.label}/" if options.label
    FileUtils.mkdir_p output_path unless Dir.exists?(output_path)
    # Open CSV
    csv_data = Aws::Utils.readCSV options.file
    # Get AWIS data
    awis = Aws::Awis.new
    csv_data.each_with_index do |row,index|
      next if index == 0
      print "#{row.last} ..."
      if File.exist?(output_path + "/" + row.last) #skip domain if already have data
        puts " already exist."
        next
      end
      url_info = awis.url_info row.last
      File.write(output_path + "/" + row.last, JSON.pretty_generate(url_info))
      puts " done."
    end
  end
end

command :traffic do |c|
  c.syntax = 'awis traffic'
  c.description = 'Gets data from trafficHistory Action.'
  c.option '-f FILE','--file FILE',String, 'Path to CSV holding domain, last column must be the domains'
  c.option '-o PATH','--output PATH', String, 'Output directory'
  c.option '-l LABEL','--label LABEL', String, 'Label to add to the output folder'
  c.option '-s DATE','--start DATE', String, 'Start date for results. A date within the last 4 years in format YYYYMMDD.'
  c.option '-r DAYS','--range DAYS', String, 'Number of days to return. Maximum value is 31'
  c.action do |args, options|
    if !options.file or !options.output
      puts "Set all options: file and output path"
    end
    options.default :start => false, :range => 31
    # Create output directory
    output_path = "#{options.output}/#{Date.today.to_s} Traffic_History"
    output_path += " - #{options.label}/" if options.label
    FileUtils.mkdir_p output_path unless Dir.exists?(output_path)
    # Open CSV
    csv_data = Aws::Utils.readCSV options.file
    # Get AWIS data
    awis = Aws::Awis.new
    csv_data.each_with_index do |row,index|
      next if index == 0
      print "#{row.last} ..."
      if File.exist?(output_path + row.last) #skip domain if already have data
        puts " already exist."
        next
      end
      url_info = awis.traffic_history row.last, options.start, options.range
      File.write(output_path + row.last, JSON.pretty_generate(url_info))
      puts " done."
    end
  end
end

# REPORTS
# Read for stored information, agregate files and extract information
# Global rank only

# Global rank and top country contributor

# + language

# possible rev calculator, see Christian's sheet

# owned domains


#aws = Aws::Awis.new
#puts aws.url_info("eyeo.com","Rank")
